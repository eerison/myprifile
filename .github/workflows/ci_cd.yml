name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  release:
    types:
      - created

env:
  APP_ENV: ${{ secrets.APP_ENV }}
  GIT_REF: ${{ github.head_ref }}
  MAILER_DSN: ${{ secrets.MAILER_DSN }}
  MAILER_USER: ${{ secrets.MAILER_USER }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  TRANSLOADIT_KEY: ${{ secrets.TRANSLOADIT_KEY }}
  TRANSLOADIT_SECRET: ${{ secrets.TRANSLOADIT_SECRET }}
  TRANSLOADIT_DELIVERY: 1

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - uses: rlespinasse/github-slug-action@v3.x
      - name: Output
        run: |
          echo "Partial variables"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART }}"
          echo "Slug variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG }}"
          echo "Slug URL variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG_URL }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG_URL }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG_URL }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG_URL }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG_URL }}"
          echo "Short SHA variables"
          echo "   sha                 : ${{ env.GITHUB_SHA_SHORT }}"
          echo "   pull request sha    : ${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public
          restore-keys: |
            ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-
            ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-build-$APP_ENV-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Composer
        run: composer $APP_ENV

      - name: Webpack
        run: yarn $APP_ENV

      - name: Phpunit version
        run: bin/phpunit --version

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: See files
        run: |
          pwd
          ls -lha

      - name: Code Sniffer
        run: composer lint_phpcs

      - name: Twig
        run: composer lint_twig

      - name: Symfony Containers
        run: composer lint_container


  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_ENV: test
      MAILER_DSN: null://null
      XDEBUG_MODE: coverage
    container:
      image: eerison/myprofile:dev
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: myprofile
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: Setup Database
        run: composer db

      - name: Fixtures
        run: composer fixtures

      - name: See files
        run: |
          pwd
          ls -lha

      - name: Run Tests
        run: composer test

      - name: Codecov
        uses: codecov/codecov-action@v1

  deploy_pr:
    name: Deploy - Pull request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: staging_pr
      url: https://${{env.APP_NAME}}.herokuapp.com
    env:
      APP_NAME: my-profile-pr-${{ github.event.number }}
    needs:
      - lint
      - test
    container:
      image: eerison/myprofile:dev
    steps:
        - uses: actions/checkout@v2

        - name: Cache composer and webpack files
          uses: actions/cache@v2
          with:
            key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
            path: |
              bin/.phpunit
              vendor
              node_modules
              public

        - name: See files
          run: |
            pwd
            ls -lha

        - name: Web deploy
          uses: akhileshns/heroku-deploy@v3.12.12
          with:
            heroku_api_key: ${{secrets.HEROKU_API_KEY}}
            heroku_app_name: $APP_NAME
            heroku_email: ${{secrets.HEROKU_EMAIL}}
            usedocker: true
            docker_build_args: |
              APP_ENV
              APP_DEBUG
              GIT_REF
              MAILER_DSN
              MAILER_USER
              SENTRY_DSN
              TRANSLOADIT_KEY
              TRANSLOADIT_SECRET
              TRANSLOADIT_DELIVERY
          env:
            APP_DEBUG: false

        - name: Create Database
          continue-on-error: true
          run:  heroku addons:create heroku-postgresql --app $APP_NAME --name postgresql-$APP_NAME

        - name: Migrations
          run: heroku run --app $APP_NAME composer migrate

        - name: Fixtures
          run: heroku run --app $APP_NAME composer fixtures

  deploy_staging:
    name: Deploy - Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-master-myprofile.herokuapp.com
    env:
      APP_NAME: staging-master-myprofile
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: Web deploy
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: $APP_NAME
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          usedocker: true
          docker_build_args: |
            APP_ENV
            GIT_REF
            MAILER_DSN
            MAILER_USER
            SENTRY_DSN
            TRANSLOADIT_KEY
            TRANSLOADIT_SECRET
            TRANSLOADIT_DELIVERY

      - name: Migrations
        run: heroku run --app $APP_NAME composer migrate

  deploy_prod:
    name: Deploy - Production
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://prod-test-myprofile.herokuapp.com
    env:
      APP_NAME: prod-test-myprofile
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: Web deploy
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: $APP_NAME
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          usedocker: true
          docker_build_args: |
            APP_ENV
            GIT_REF
            MAILER_DSN
            MAILER_USER
            SENTRY_DSN
            TRANSLOADIT_KEY
            TRANSLOADIT_SECRET
            TRANSLOADIT_DELIVERY

      - name: Migrations
        run: heroku run --app $APP_NAME composer migrate

