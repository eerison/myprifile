name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize

env:
  APP_ENV: ${{secrets.APP_ENV}}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public
          restore-keys: |
            ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-
            ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-build-$APP_ENV-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Composer
        run: composer $APP_ENV

      - name: Webpack
        run: yarn $APP_ENV

      - name: Phpunit version
        run: bin/phpunit --version

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: See files
        run: |
          pwd
          ls -lha

      - name: Code Sniffer
        run: composer lint_phpcs

      - name: Twig
        run: composer lint_twig

      - name: Symfony Containers
        run: composer lint_container


  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_ENV: test
      XDEBUG_MODE: coverage
    container:
      image: eerison/myprofile:dev
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: myprofile
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2

      - name: Cache composer and webpack files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: Setup Database
        run: composer db

      - name: Fixtures
        run: composer fixtures

      - name: See files
        run: |
          pwd
          ls -lha

      - name: Run Tests
        run: composer test

      - name: Codecov
        uses: codecov/codecov-action@v1

  deploy_pr:
    name: Deploy - Pull request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: staging_pr
      url: https://$APP_NAME.herokuapp.com
    env:
      APP_NAME: my-profile-pr-${{ github.event.number }}
    needs:
      - lint
      - test
    container:
      image: eerison/myprofile:dev
    steps:
        - uses: actions/checkout@v2

        - name: Cache composer and webpack files
          uses: actions/cache@v2
          with:
            key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
            path: |
              bin/.phpunit
              vendor
              node_modules
              public

        - name: See files
          run: |
            pwd
            ls -lha

        - name: Web deploy
          uses: akhileshns/heroku-deploy@v3.12.12
          with:
            heroku_api_key: ${{secrets.HEROKU_API_KEY}}
            heroku_app_name: $APP_NAME
            heroku_email: ${{secrets.HEROKU_EMAIL}}
            usedocker: true
            docker_build_args: |
              APP_ENV
              APP_DEBUG
              GIT_REF
          env:
            GIT_REF: $GITHUB_REF
            APP_DEBUG: false

        - name: Create Database
          continue-on-error: true
          run:  heroku addons:create heroku-postgresql --app $APP_NAME --name postgresql-$APP_NAME

        - name: Migrations
          run: heroku run --app $APP_NAME composer migrate

        - name: Fixtures
          run: heroku run --app $APP_NAME composer fixtures

        - name: Commenting environment's link in PR.
          uses: mshick/add-pr-comment@v1
          with:
            repo-token: ${{ secrets.GITHUB_TOKEN }}
            message: |
              You can see your code in this [environment](https://${{ env.APP_NAME }}.herokuapp.com) ðŸš€

  deploy_staging:
    name: Deploy - Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment:
      name: staging
      url: https://$APP_NAME.herokuapp.com
    env:
      APP_NAME: new-staging-my-profile
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-$APP_ENV-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            bin/.phpunit
            vendor
            node_modules
            public

      - name: Web deploy
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: $APP_NAME
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          usedocker: true
          docker_build_args: |
            APP_ENV
            GIT_REF
        env:
          GIT_REF: $GITHUB_REF

      - name: Migrations
        run: heroku run --app $APP_NAME composer migrate

